<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="xdoc2html.xsl"?>
<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V2.0//EN" "http://forrest.apache.org/dtd/document-v20.dtd">
<document>
  <header>
    <title>IrScrutinizer documentation</title>
  </header>
<body>
<note>This is a reference manual. It is written for completeness and correctness, not
    for accessability. For an easier introduction, see
    <a href="http://www.hifi-remote.com/wiki/index.php?title=IrScrutinizer_Guide">this tutorial</a>.
</note>

    <warning>Sending undocumented IR commands to
your equipment may damage or even destroy it. By using this program,
you agree to take the responsibility for possible damages yourself, and
not to hold the author responsible.</warning>
      <table>
      <caption>Revision history</caption>
	<tr>
	  <th>Date</th><th>Description</th>
	</tr>
	<tr>
	  <td>2013-11-12</td>
	  <td>Initial version.</td>
	</tr>
	<tr>
	  <td>2013-12-01</td>
	  <td>Next unfinished version.</td>
	</tr>
	<tr>
	  <td>2014-01-22</td>
	  <td>Version for release 1.0.0, still leaving much to be desired.</td>
	</tr>
	<tr>
	  <td>2014-06-07</td>
	  <td>Version for release 1.1.0, some fixes, much still to be done.</td>
	</tr>
	<tr>
	  <td>2014-09-21</td>
	  <td>Version for release 1.1.1, some more fixes and enhancements.</td>
	</tr>
        <tr>
	  <td>2015-04-07</td>
	  <td>Version for release 1.1.2, installation issued reworked. Misc. minor improvements.</td>
	</tr>
        <tr>
	  <td>2015-08-19</td>
	  <td>Version for release 1.1.3. Misc. minor improvements.</td>
	</tr>
      </table>

<section>
<title>Introduction</title>
<p>
IrScrutinizer is a powerful program for capturing, generating, analyzing,
importing, and
exporting of infrared (IR) signals. For capturing and sending IR signals
several different hardware sensors and senders are supported. IR Signals can be
imported not only by capturing from one of the supported hardware
sensors (among others: IrWidget, Global Caché, Command Fusion, and Arduino), but also from a
number of different file formats (among others: LIRC, Wave, CML, Pronto Classic and
professional, RMDU (partially), and different text based formats; not only from
files, but also from the clipboard, from URLs, and from file hierarchies), as
well as the Internet IR Databases by Global Caché and by IRDB. Imported signals
can be decoded, analyzed, edited, and plotted. A collection of
IR signal can thus be assembled and edited, and finally exported in one of the
many supported formats.  In addition, the program contains the powerful
IrpMaster IR-renderer, which means that almost all IR protocols known to the
Internet community can be generated.</p>

<p>Written in Java (with the exception of two native libraries), most of the
functionality of the program is available on every Java platform. The native
libraries (DecodeIR and RXTX) are presently available for 32- and 64-bit
versions of Windows, Linux (x86 and amd-64), and MacOsX, and can with moderate effort be compiled for other
platforms.</p>
<p>
For someone with knowledge in the problem domain of IR signals and
their parameterization, this program is believed to be simple to
use. This knowledge is assumed from the reader. Other can acquire that
knowledge either from the <a
 href="http://www.hifi-remote.com/wiki/index.php?title=Main_Page">JP1
Wiki</a>
or, e.g., <a href="http://www.sbprojects.com/knowledge/ir/index.php">this
link</a>.</p>

<p>Note that screen shots are included as illustrations only; they may not
depict the current program completely accurately. They come from different
versions of  the program, using different platforms (Linux and Windows), and
using different "look and feels".</p>

<p>Sources are hosted on <a href="https://github.com/bengtmartensson/harctoolboxbundle">Github</a>.
Bugreports are enhancement requests are welcome (e.g. as
<a href="https://github.com/bengtmartensson/harctoolboxbundle/issues">issues</a>),
as is contributions (code, documentation, use cases, protocols etc.).
</p>

<p>The present document is written more for completeness than for
easy accessibility. For an easier introduction, see
    <a href="http://www.hifi-remote.com/wiki/index.php?title=IrScrutinizer_Guide">this tutorial</a>.
   </p>
<p>Here are the current <a href="IrScrutinizer.releasenotes.txt">release
notes</a>.</p>

<section>
<title>Background</title>
<p>
In 2011 I wrote an IR signal "engine"
called <a href="IrpMaster.html">IrpMaster</a>. It can also be invoked as a
command line program. Then a program
called <a href="IrMaster.html">IrMaster</a> was released, which among other things
constitutes a user friendly GUI front end to IrpMaster. The present program,
IrScrutinizer, is also based on IrpMaster, and adds functionality from
IrMaster, in particular the possibility to collect IR signals, a vastly
improved import and export facility, and edit collections of IR commands.

IrScrutizer almost completely replaces IrMaster.
The final version was released in Febrary 2014, slightly ironically called version
1.0.0.  No further development is planned.</p>
</section>

<section>
<title>Copyright and License</title>
<p>The program, as well as this document, is copyright by myself. My
copyright does not extend to the embedded "components" Analyze,
Makehex, DecodeIR, and Jirc.  ExchangeIR was written by
Graham Dixon and published under <a
 href="http://www.gnu.org/licenses/gpl.html">GPL3 license</a>. A subset has been translated to Java by Bengt Martensson.
DecodeIR was originally written by John S. Fine, with later
contributions from others.
It is public domain software. IrpMaster is using ANTLR3.4 and depends on the run time functions of ANTLR3, which
is <a href="http://www.antlr.org/license.html">free software with BSD license</a>.</p>
<p>
The "database file" IrpProtocols.ini is derived from <a
href="http://www.hifi-remote.com/wiki/index.php?title=DecodeIR">DecodeIR.html</a>, thus I do not claim copyright.
</p>
<p>The program uses <a
href="http://jcommander.org">JCommander</a> by  Cédric Beust to parse the
command line arguments. It is free software with <a
href="https://github.com/cbeust/jcommander/blob/master/license.txt">Apache
2</a> license.</p>

<p>Icons by <a href="http://www.everaldo.com">Everaldo Coelho</a> from the
Crystal project are used; these are released under the <a href="http://www.gnu.org/licenses/lgpl.html">LGPL license</a>.</p>

<p>The Windows installer was built with <a
href="http://www.jrsoftware.org/isinfo.php">Inno Setup</a>, which is <a
href="http://www.jrsoftware.org/files/is/license.txt">free software</a> by
<a
href="http://www.jrsoftware.org">Jordan Russel</a>.  To modify the user's path in Windows, the Inno extension <a
href="http://legroom.net/software/modpath">modpath</a> by <a href="http://www.legroom.net/">Jared Breland</a>, distributed under
the <a href="http://www.gnu.org/licenses/lgpl.html">GNU Lesser General Public
License (LGPL), version 3</a>.</p>

<p>Serial communication is handled by
the <a href="http://rxtx.qbang.org/wiki/index.php/Main_Page">RXTX library</a>,
licensed under the <a href="http://users.frii.com/jarvi/rxtx/license.html">LGPL
v 2.1 license</a>.</p>

<p>JSON handling is implemented using
the <a href="http://eclipsesource.com/blogs/2013/04/18/minimal-json-parser-for-java/">"fast
and minimal JSON parser for Java"</a> by Ralf Sernberg, licensed under
the <a href="http://www.eclipse.org/legal/epl-v10.html">Eclipse Eclipse Public
License Version 1.0</a>.</p>


<p><a href="http://www.lirc.org">LIRC (Linux Infrared Remote Control)</a> is according
to its web site copyright 1999 by Karsten Scheibler
and Christoph Bartelmus (with contribution of may others), and is licensed
under GPL2. The parts used here have been translated to Java by myself,
available <a href="Jirc.html">here</a>.</p>


<p>Tonto was written by Stewart Allen, and is licensed under the
<a href="Tonto-license.txt">"Clarified Artistic License"</a>.</p>

<p>The contained Arduino firmware contains code copyrighted by Michael Dreher
(<a
href="http://www.mikrocontroller.net/articles/High-Speed_capture_mit_ATmega_Timer">IrWidget</a>,
GPL2 or later) and Chris Young (<a href="http://tech.cyborg5.com/irlib/">IRLib</a> LGPL).</p>

<p>The program contains icons from Global Caché, Dangerous Prototypes, Arduino,
and IrTrans. These are used exclusively in the context of these firms, and only
used to illustrate their products. The icons for JP1 and LIRC are also
exclusively used to illustrate themselves.</p>

<p>
The program and its documentation are licensed under the <a
 href="http://www.gnu.org/licenses/gpl.html">GNU General Public License version
3</a>, making everyone free to use, study, improve, etc., under certain
conditions. File formats, their description in human- or
machine-readable form (DTDs, XML Schemas), are placed in the public domain.</p>
      </section>

<section><title>Privacy note</title>
<p>
Some functions (Help -> Project Home page, Help -> IRP Notation Spec, Help ->
Protocol Specs, Tools -> Check for updates) access the Internet using standard
http calls. This causes the originating machine's IP-address, time and date, the
used browser, and possibly other information to be stored on the called
server. If this is a concern for you, please do not use this (non-critical)
functionality (or block your computer's Internet access).</p>
      </section>
    </section>

<section><title>Overview</title>
<p>Next a high-level view of the different use cases will be given.</p>
      <dl>
	<dt>Analyze ("Scrutinize") individual IR Signal/Ir Sequence</dt>
	<dd>An <a href="Glossary.html#IrSignal">IrSignal</a> or <a
href="Glossary.html#IrSequence">IrSequence</a> can be <a href="Glossary.html#Capturing">captured</a> from connected hardware, or
imported from files in different formats, the clipboard, or from Internet
databases. The IrSequence can be broken into a <a
href="Glossary.html#StartSequence">beginning-</a>, <a href="Glossary.html#RepeatSequence">repeat-</a>, and
<a href="Glossary.html#EndingSequence">ending
sequence</a>, and <a href="Glossary.html#Decode">decoded</a>, analyzed, and plotted. It can
be exported in different
formats, or sent to different transmitting hardware.</dd>

      <dt>Analyze/edit/compose/export collections of IR signals ("<a href="Glossary.html#Remote">"remotes"</a>)</dt>
      <dd>A collection of commands can be assembled either from individual IR
signals (as above), captured several at a time, or imported from files in
different formats, the clipboard, or from Internet databases. The collection
and the individual commands can be edited as in a spreadsheet. It can be
exported in a number of different formats.</dd>

      <dt>Generate IR Signals from known <a href="Glossary.html#IrProtocol">protocols</a></dt>
      <dd>IR Signals can be generated from the Internet's largest protocol data
base, containing over 100 protocol. Necessary protocol parameter values are to be
entered. Thus generated signals can be analyzed as single signals, incorporated
into remotes, or exported to files &mdash; also from e.g. intervals of
parameters.</dd>
      </dl>
    </section>

<section>
<title>Installation</title>
<section>
<title>General</title>
<p>IrScrutinizer, and all but two of its third-party additions, are written in Java,
which means that it should run on every computer with a modern Java installed;
Windows, Linux, Macintosh, etc. Java 1.6 or later is required. The two
exception are DecodeIR and the native part of RXTX, which are written in C++
and C respectively, and invoked as shared library
    (<code>.dll</code> in Windows, <code>.so</code> in Linux, <code>.jnilib</code> or <code>.dylib</code> in Mac OS X). If DecodeIR or
RXTX are
not available on for a particular platform it is not a major problem, as most parts of IrScrutinizer will
work fine without it; just the DecodeIR-related functions or the serial
hardware access will be unavailable.</p>

<p>In all versions, IrScrutinizer behave civilized, in that the installation
directory can be read only after the installation.
</p>
<p>As of version 1.1.2, there are five different way of installing the program, described next.</p>
</section>
<section>
    <title>Fedora Linux</title>
    <p>Fedora rpm packages are
        available for the previous version 1.1.2.</p>
        <p>To install, the command <code>sudo yum install harctoolbox harctoolbox-doc</code> should be issued in a terminal window.
        This will install IrScrutinizer as a desktop program, as well as the command line
        commands <code>irscrutinizer</code> and <code>irpmaster</code>.
        To uninstall, use the command  <code>sudo yum erase harctoolbox harctoolbox-doc</code>.</p>
        <p>Unfortunatelly, the packaging contains a few semi-serious problems. These are reported, but stay unfixed.
            Fedora users are recommended to use the generic binary package.</p>
</section>
<section><title>Windows</title>
<p>Download the <a
href="http://www.harctoolbox.org/downloads/IrScrutinizer.exe">Window setup
file</a> and double click it. Select any installation
directory you like; suggested is <code>C:\Program Files\IrScrutinizer</code>,
unless you can not install with administrator rights. Unless
reason to do so, create the start menu folder, and the desktop
icon. Administrator rights are needed only it installing in a directory like <code>Program Files</code> is desired.
IrScrutinizer can now be started from <code>Start -> IrScrutinizer ->
IrScrutinizer</code>, or from the desktop icon.</p>

<p>This will also install the command line program <a href="IrpMaster.html">IrpMaster</a>,
which can be called as <code>irpmaster</code> from a so-called DOS box.</p>

<p>To uninstall, select the uninstall option from the Start menu. Very pedantic
people may like to delete the properties file too, see <a href="#Properties">properties</a>.</p>
</section>
      <section>
	<title>Mac OS X app</title>
<p>Download the  <a
    href="http://www.harctoolbox.org/downloads/IrScrutinizer-app.zip">compressed app</a>.
    Uncompress it by double clicking. Opening it will show an app, and a few documention files.
    The app can just be dragged to the desktop, to the tray, to "Applications" or any other location the user prefers.
    IrScrutinizer now behaves like any other app in Mac OS X.</p>

    <p>(The previous version was instead distrubuted as a <a
    href="http://www.harctoolbox.org/downloads/IrScrutinizer.dmg.zip">compressed disk image</a>.
    This should be uncompressed it by double clicking, and mounted by double clicking the resulting file.
    A mounted disk image "IrScrutinizer" will appear on the desktop. Then proceed as above.)</p>

    <p>To unistall, just move the app to the trash.</p>
    <p>The command line program <a href="IrpMaster.html">IrpMaster</a> is not supported in this mode.
    (For this, the <a href="#Generic+Binary">generic binary</a> distribution has to be used.)    </p>
      </section>

<section><title>Generic Binary</title>
<p>The generic binary version consists of all the java code packed in one executable jar file,
together with supporting files, like all the compiled shared libraries for the different
operating systems Linux, Windows, and Mac. It can be used on all those systems. (In other environments, the
shared libraries may be compiled with moderate effort.)</p>

<p>The generic binary distribution be used whenever using the rpm/setup.exe/app installation is not possible or not desired.</p>

<p>To install, unpack in an empty directory of your choice, suggested is
    <code>/usr/local/irscrutinizer</code>. Inspect the wrapper <code>irscrutinizer.sh</code>, and
    make changes if necessary.</p>

<p>It is recommended to make links from a directory in the path to the
wrapper script, e.g.</p>
<source>
ln -s /usr/local/irscrutinizer/irscrutinizer.sh /usr/local/bin/irscrutinizer
ln -s /usr/local/irscrutinizer/irscrutinizer.sh /usr/local/bin/irpmaster
</source>
<p>If your system supports the RXTX, you should preferably use that. See
    the comments in the wrapper <code>irscrutinizer.sh</code>.</p>

    <p>The JNI libraries <code>libDecodeIR.so</code>/<code>DecodeIR.dll</code>/<code>libDecodeIR.jnilib</code> are contained in the
    distribution and should be found by the program in the installed location.</p>

    <p>The desktop file <code>irscrutinizer.desktop</code> should, if desired, be
    installed in <code>/usr/local/share/applications</code> alternatively
    <code>~/.local/share/applications</code>.</p>

    <p>The program can now be started either as a desktop program, or by typing <code>irscrutinizer</code> on the command line.
    Also the command line program <a href="IrpMaster.html">IrpMaster</a> can be started
    by the command <code>irpmaster</code>. It is also possible to start the program by double clicking
    on the jar file. In case this brings up the archive manager, the desktop needs to be taught
    to open executable jar files with the "java" application. For this, select a jar file the file browser,
    select the properties, and select "java" as the application to "open with". (The details might vary.)</p>

<p>To uninstall, just delete the files. Very pedantic
    people may like to delete the <a href="#Properties">properties file</a> too.</p>
</section>

<section>
    <title>Source distribution</title>
    <p>Compiling the sources is covered in the <a href="#Appendix.+Building+from+sources">Appendix</a>.
    This allows to install the different components in a way compliant with e.g. the installation by the Gnu Autotools,
    normally in subdirectories of <code>/usr/local</code>.</p>
</section>
</section>

<section>
<title>Concepts</title>
<p>For anyone familiar with the problem domain, this
program is believed to be intuitive and easy to use. Almost all user interface
elements have tool-help texts. Different panes have their own pop-up help. In what follows, we will not attempt to
explain every detail of the user interface, but rather concentrate on the
concepts. Furthermore, it is possible that new elements and functionality has
been implemented since the documentation was written.</p>
<p>
This program does not disturb the user with a number of
annoying, often <a
 href="http://www.bengt-martensson.de/misc/modal.html">modal</a>,
pop ups, but directs errors, warnings, and status outputs to the <em>console window</em>,
taking up the lower third of the main window. This
window is re-sizeable. There is a context menu for the
console, accessible by pressing the right mouse button in it.</p>
<p>In the upper row, there are six pull-down menus, named File,
Edit, Actions, Options, Tools, and Help. Their usage is believed to be mainly
self explanatory, with some the exceptions.</p>

<p>Options to the program are in general found in the Options menu, or its
subordinate menus. Some parameters for particular export formats are found in
the sub-panes of the "Export" pane. Also the hardware configuring panes contain
user parameters.</p>

<p>
The main window is composed of seven sub panes denoted
by "Scrutinize signal" (for processing single signal), "Scrutinize remote" (for
collecting several signals to one "remote"), "Generate" (generates IR signal
from protocol name and parameters), "Import", "Export",
"Capturing Hardware", and "Sending Hardware"
respectively. These panels will be discussed in Section <a
href="#GUI+Elements+walkthrough">GUI Elements walk through</a></p>
    </section>

<section><title>Analyzing a single IR Sequence or IR Signal</title>
<p>The pane "Scrutinize Signal" is devoted to the analysis of one single IR
sequence.</p>

<p>To capture IR Sequences from a hardware sensor, first set it up and open it,
see Section <a href="#Capturing+Hardware">Capturing Hardware</a>. An IR Sequence
is captured by pressing the "Capture" button, and sending an IR signal to the
selected hardware. Note that the hardware captures an <em><a
href="Glossary.html#IrSequence">IR Sequence</a></em>, not an <a href="Glossary.html#IrSignal">IR Signal</a>. It
consists of an (sometimes empty) <a href="Glossary.html#StartSequence">start sequence</a>,
an unknown number of <a href="Glossary.html#RepeatSequence">repeat sequences</a>, and
sometimes an <a href="Glossary.html#EndingSequence">ending sequence</a>.</p>
    </section>

<section><title>Adding new export formats</title>
<p>Only some of the many export formats are  defined in the Java code
of the program, the rest in the file  <code>exportformats.xml</code>,
located in the root of the install directory. By modifying this file,
the user can simply add his/her own export formats according to own
needs. An exporformat consists of a number of properties, together
with a small "program" written in the transformation language XSLT,
for transforming a Girr-XML-tree to the desired text format.</p>

<p>The rest of this section documents the format of the file, and is
supposed to be read only when needed. Fundamental knowledge of XML and
<a href="Glossary.html#XSLT">XSLT transformations</a> are assumed.</p>

<section><title>Format of the file
<code>exportformats.xml</code></title>
<p>The file is an XML file read in without validation. The syntax and semantics
are beleived to be essentailly self explaining or clear from the
examples aleady in there. An export format is
packed in an element of type <code>exportformat</code>. It contains
the following attributes:</p>
<dl>
<dt>name</dt><dd>Text string used for identifying the format.</dd>
<dt>extension</dt><dd>Text string denoting preferred file extension (not including period)
of generated files.</dd>
<dt>multiSignal</dt><dd>Boolean (value: true and false). Denotes if
several signals can be represented in one export, or only one.</dd>
<dt>simpleSequence</dt><dd>Boolean, (values <code>true</code> of
<code>false</code>). If true, the export really describes an <a
href="Glossary.html#IrSequence">sequence</a> rather than am <a
href="Glossary.html#IrSignal">signal</a> (with intro-, repeat- , and
ending-sequences), therefore the user must explictly state a particular number
of repetitions for an export.</dd>
</dl>
<p>The element contains a single child element, namely the XSLT
transformation, which is an element of type
<code>xsl:stylesheet</code>, with attributes as in the examples. It
should transform a Girr XML DOM tree in the <a
href="Girr.html#Fat+Format">"fat" format</a>, with
<code>remotes</code> as
root element, into the desired text format. It may be advisable to use
the already present formats as guide.</p>

<p>After editing the file, it can be reloaded either by re-starting the
program, or by selecting Options -> Export formats database -> Reload.</p>
    </section>
</section>
<section>
    <title>Properties</title>
<p>Under Windows, the properties are stored in
<code><![CDATA[%LOCALAPPDATA%\IrScrutinizer\IrScrutinizer.properties.xml]]></code> using Windows
Vista and later (on my Windows 7 system, this is <code>%HOME%\AppData\Local\IrScrutinizer\IrScrutinizer.properties.xml</code>), otherwise in
<code>%APPDATA%\IrScrutinizer\IrScrutinizer.properties.xml</code>. Using other operating
systems, it is stored under <code>$HOME/.config/IrScrutinizer/properties.xml</code>. It is
not deleted by  un-install. (If weird problems appear, for example after an update, try
deleting this file. For this, there is a command line option <code>--nuke-properties</code> that can be used to
conveniently delete the present property file, without knowing its exact name.)
</p>
      </section>
<section>
<title>GUI Elements walk through</title>
<section>
<title>The "Scrutinize signal" pane</title>
<p>This panel is devoted to the analysis of a <em>single <a href="Glossary.html#IrSignal">IR
signal</a></em> or <a href="Glossary.html#IrSequence">IR sequence</a>. A (single)
signal is either read from hardware using the "Capture" button (requires that
the capturing hardware has been set on the "Capturing Hardware" pane), imported
from a file (using the context menu in the data window, or through File ->
Import -> Import as single sequence), or pasted from the clipboard. Also, some
other panes can transfer data to this pane.

For text
import, the signal can be in either Pronto CCF format, raw format (indicated by
a leading "+"-sign), or in the UEI learned format. The signal is printed in the
data window, in the preferred text format, which can be selected from the
options menu. The text representation may be edited (assuming sufficient
knowledge!), after which the edited signal is analyzed and plotted again by
pressing the "Scrutinize" button. The signal may be sent to the sending
hardware by pressing the "Transmit" button.</p>

<p>Using context menus, the result can be sent to the clipboard or saved
to a file.</p>

<p>The plot can be zoomed by pressing the left mouse button and dragging.
Printing and exported as graph is presently not implemented.</p>

<p>The menu entry Actions -> Enter test signal (or its accelerator, the F9
key) enters a test signal.</p>
<p>
In rare cases, transforming the signal between different formats may introduce
some rounding errors causing decoding
to fail.
</p>
</section>
<section>
<title>The "Scrutinize remote" pane</title>
<p>This panel is devoted to the capturing/import/editing of a collection of IR
signals, called  "a remote" in the sequel. The panel contains two sub-panels:
for <a href="Glossary.html#ParametricIRSignal">parametric signals</a> and for <a href="Glossary.html#RawIRSignal">non-parametric, "raw", signals</a>.</p>

<p>A "parametric" signal is determined by its protocol name, and the values of
the protocol's parameters. A "raw" signal is determined by its timing pattern,
and its modulation frequency. It may have one or many decodes, or
none. Nevertheless, by definition, a raw signal is determined by its timing,
not the decodes.
</p>

<p>In both cases, the sub panes consists of tables with a number of
columns. Every signal takes up a row in the table. The content of the
individual cells (with the exception of its number and date) can be
individually edited, like in a spreadsheet program.</p>

<p>In both tables, the right mouse button opens a context menu containing a
number of ways to manipulate the table, its view, or the data contained
therein. By enabling the row selector, the rows can be sorted along any of the
present columns. </p>

<p>To capture a number of IR signals, first configure the hardware using the <a
href='#The+"Capturing+HW"+pane'>capturing hardware</a> pane. Next press the
Capture button. The program will now run the  capturing in a separate thread, so
the user just have to press the buttons of the remote. The signals will be
received, interpreted, decoded, and entered on subsequent lines in the selected
table (raw or parameterized). The capture thread will continue until the
captured button is pressed again. (Note that this is completely different from
the capture button on the "Scrutinize signal" panel.) The user may mix captures
with other activities, like entering information (name, comments,...) in the
table.</p>

<p>The export button exports the content of the currently selected table (raw
or parameterized) according to the currently selected export format.</p>

<p>The menu entry Actions -> Enter test signal (or its accelerator, the F9
key) enters a test signal, either as parametric signal, or as a raw signal.</p>
</section>
<section>
<title>The "Generate" pane</title>
<p>In the upper part of this pane, an  IR protocol is selected, identified by
name, and the parameters D ("device", in almost all protocols), S
("sub-device", not in all protocols), F ("function", also called
command number or OBC, present in almost all protocols), as well as T, <a href="Glossary.html#toggle">"toggle"</a>
(in general 0 or 1, only in a few protocols). These number can be entered as
decimal numbers, or, by prepending "0x", as hexadecimal numbers.</p>

<p>By pressing "Generate", the signal is computed, and the middle window is
filled with a textual representation, in the form selected by Options -> Output
Text Format.</p>

<p>The Export button initiates an export to a file format selected by the <a
href="#The+Export+pane">Export pane</a>. The three lower buttons transfer the signal(s) to the
scrutinize signal panel, the raw remote table, or the parameterized panel.</p>

<section><title>Accessing a number of different parameter values</title><p>
For the export and the transfer to the "scrutinize remote" tables, not only a
single parameter value can be selected, but whole sets. The complete syntax and
semantics is given <a href="IrpMaster.html#Iterating+over+input+parameter+ranges">in the
IrpMaster documentation</a>, we here just mention that e.g. 12:34 means all
numbers between 12 and 34 (inclusive), and * denotes all possible values (as defined by the
protocol's <a href="Glossary.html#IRPNotation">IRP notation)</a>.
</p>
	</section>
    </section>

<section>
<title>The Import pane</title>
<!--p>The import feature is among the most advance parts of IrScrutinizer.</p-->

<p>The import pane allows for selective import of collection of <a
href="Glossary.html#Command">IR commands</a>. Both Internet data bases and
file formats are supported. Import can take place from local files or even file
hierarchies, from the clipboard, or from Internet URLs.</p>

<p>There are a number of elements common to most of the sub-panes, so these
will be described next.</p>

<p>For file/URL based imports, there is a text field, named File or
File/URL. For the latter case, an URL (like
<code>http://lirc.sourceforge.net/remotes/yamaha/RX-V995</code> can be
entered, for subsequent import without downloading to a local disc. By pressing
the "..."-Button, a file selector allows the selection of a local file. For
files and URLs, the "Edit/Browse" button allows to examine the selected
file/URL with the operating system's standard command.</p>

<p>If the option "<code>Open ZIP files</code>" (accessible from <code>Options
-> Import</code>) is
selected, zip files can  be selected, opened, and unzipped "on the fly",
without the need for the user to unzip to intermediate files.</p>

<p>When pressing one of the "Load", "Load File/URL", or "Load from clipboard"
button, the selected information is downloaded, and presented in the format of
an expandable tree. By placing the
mouse cursor over a command, additional information, like <a href="Glossary.html#Decode">decode</a>, is presented. A single
command can be selected by mouse click, a sequence of adjacent commands by
shift-click, a subset of not necessarily adjacent commands be selected by
Ctrl-click, as usual from most GUIs. A single selected command can be transferred to the
"Scrutinize signal" pane by pressing "Import signal". The "Import all" ("Import
selection") button
transfers all commands (the selected commands) to the "Scrutinize remote" pane,
sub-pane "Parametric remote" (without overwriting already present commands), while the buttons "Import all/raw" and "Import
selected/raw" transfer to the sub-pane "Raw remote".</p>

<p>The key "Transmit selected" transmits the (single) selected signal to the
	selected sending hardware.</p>

<section><title>Global Caché Database</title>
<p>Global Caché maintains a <a href="http://irdatabase.globalcache.com/">data base
of IR signals</a>, made available free of charge. "Contains over 100,000
Infrared codes for over 2,000 different remotes from over 500 manufacturers".
To use from IrScrutinizer, an API Key has be be retrieved. This can be done from
a Facebook, Google, or Yahoo account. After pressing the "APIKey" button, the
API key is entered in the pop-up window. It is subsequently saved to the
program's properties. To use, select, in order, a manufacturer, a <a
								    href="Glossary.html#DeviceType">device
type</a>, and a <a href="Glossary.html#setupCode">setup code</a>, the latter possibly by
trial-and-error.</p>
	</section>

<section><title>The IRDB Database</title>
<p><a href="http://irdb.tk">IRDB</a> is "one of the largest crowd-sourced,
manufacturer-independent databases of infrared remote control codes on the web,
and aspiring to become the most comprehensive and most accurate one."</p>

<p>To use, select, in order, a manufacturer, a <a href="Glossary.html#DeviceType">device
type</a>, and a <a href="Glossary.html#IrProtocol">protocol</a>/parameter
combination, the latter possibly by trial-and-error.</p>

<p>Pressing the "Load all" button transfers all present protocol/parameters
combinations to the tree.</p>
	</section>
<section><title>Girr (the native format of IrScrutinizer)</title>
<p>The <a href="Glossary.html#Girr">Girr format</a> is the native format of
IrScrutinizer.</p>
	</section>

<section><title>LIRC</title>
<p>The <a href="Glossary.html#LIRC">LIRC</a> import feature is based upon <a
href="Jirc.html">Jirc</a>, which is basically LIRC translated into <a
href="Glossary.html#Java">Java</a>. The LIRC importer can even import a file
system hierarchy by selecting the top directory as File/URL. (Importing the
entire lirc.org database with over 100000 commands takes around 1 minute and 1GB
of memory.)</p>
	</section>

        <section>
            <title>CML</title>
            <p>The CML format is the format used by the RTI Integration Designer software.
Many CML files are available in Internet, in particular on
                <a href="http://files.remotecentral.com/rti/index.html">RemoteCentral</a>.
                Particularly noteworthy is the <a href="http://files.remotecentral.com/collection/66-1/index.html">"megalist" by Glackowitz</a>.
                IrScrutinizer can import these files to its import tree, making every remote a nodes in the tree.
                Note that there is no need to unzip such a file; IrScrutinizer will unzip it on the fly.
            </p>
        </section>

        <section>
            <title>Command Fusion</title>
            <p>The native format that Command Fusion uses, file extension <code>.cfir</code>, can be imported here.</p>
        </section>
<section><title>RemoteMaster</title>
<p>The <a href="Glossary.html#JP1">JP1 community</a> has a large data base of parametric IR
commands. IrScrutinizer has support for importing RMDU files for
RemoteMaster. Unfortunately, the signals are stored as parameters for so-called
executors, with sometimes different parameterization ("hex", "efc") than the IRP
protocols. Translating these files to one of the known protocol/parameter
format is nothing but straightforward. It uses protocol information contained
in protocols.ini. IrScrutinizer reads this file, and can do some computations,
for example on NEC1 protocols, but not on all protocols.</p>

<p>For signals without recognized protocol name, importing
as raw signals, or to "Scrutinize signal", is not possible. However, they can
always be imported as parametric signals, possibly for manual edit.</p>
	</section>

<section><title>Pronto Classic (CCF format)</title>
<p>Many <a href="Glossary.html#ccfFileFormat">Pronto CCF files</a> are available in Internet,
in particular by <a
href="http://files.remotecentral.com/pronto/index.html">Remote
Central</a>. IrScrutinizer can read in these files to its import tree, even
preserving the Pronto "devices" as nodes in the tree.</p>

<p>Unfortunately, the <a href="Glossary.html#Tonto">Tonto library</a> used
produces the warning message <code>Error loading JComm JNI library</code>. This message
should be ignored.</p>
	</section>

<section><title>Pronto Prof. (XCF format)</title>
<p><a href="Glossary.html#xcfFileFormat">Pronto Professional XCF</a> files are
found for example at <a
href="http://files.remotecentral.com/prontopro/index.html">Remote
Central</a>. IrScrutinizer can read in these files to its import tree, even
preserving the Pronto "devices" as nodes in the tree.</p>
	</section>

<section><title>ICT IrScope format</title>
<p>The ICT format, introduced by Kevin Timmerman's  IrScope, contains the timing pattern,
the modulation frequency, and optionally a name ("note") of one or many IR signals.</p>
	</section>

<section><title>Text format</title>
<p>In the Internet, there are a lot of information in table-like formats, like
Excel, describing the IR commands of certain devices. IrScrutinizer has some
possibilities of importing these &mdash; after exporting them to a text format,
like tab separated values (tsv) or comma separated values.</p>

<section><title>Raw</title>
<p>The sub-pane allows for the parsing of text files separated by a certain
characters, like commas, semicolons, or tabs. The separating characters is
selected in the "Field separator" combo box. The column to be used as name is
entered in the "Name col." combo box, while the data to be interpreted either as
raw data or CCF format, is entered  in the "Raw signal col.". If the "... and
subsequent columns" is selected, all subsequent columns are added to the data.</p>
	  </section>

<section><title>Raw, line-based</title>
<p>This pane tries to interpret a line-based file as a number of named IR
commands, using heuristics.</p>
	  </section>

<section><title>Parameterized</title>
<p>The sub-pane allows for the parsing of text files separated by a certain
characters, like commas, semicolons, or tabs. The separating characters is
selected in the "Field separator" combo box. The column to be used as name is
entered in the "Name col." combo box, while protocol name and the parameters D,
S, and F are entered in their respective combo boxes. They are parsed in the
number base selected.</p>
	  </section>
	</section>

<section><title>Wave</title>
<p>This pane imports and analyzes wave files, considered to represent IR
signals. The outcome of the analysis (sample frequency, sample size, the number
of channels, and in the case of two channels, the number of sample times the
left and right channels are in phase or anti-phase) is printed to the
console.</p>
	</section>
</section>

<section>
<title>The Export pane</title>
<p>Using the export pane, export files can be generated,  allowing
other programs to use the computed results. Single signals (from the
"Scrutinize signal" pane), collections of signals (from the "Scrutinize remote"
pane), or generated signals can be exported. Exports can be generated in a
number of different formats. Some (Girr (=XML) and text) can contain both
the Pronto format and the "raw" format (timings in
microseconds, positive for pulses, negative for gaps), as well as other
formats. These formats, together with Wave, LIRC, and Pronto Classic, are
built-in in the program. However, it is possible to define new
export formats by extending a configuration file, see <a
href="#Adding+new+export+formats">Adding new export formats</a>. The formats
are, at the time of this writing:</p>
<dl>
<dt>Girr</dt>
<dd>The program's native format, based on XML. Very flexible and
extensible. Can contain information like the raw format, CCF format, UEI
learned format, and the Global Caché sendir format. <a href="Girr.html">Documentation</a>.</dd>
<dt>Text</dt>
<dd>The text format is essentially the Girr format stripped of the XML markup information.</dd>
<dt>Wave</dt>
<dd><!--See the article <a href="wave.html">Wave files for IR sequences</a>.-->
IR sequences encoded as wave audio files.
</dd>
<dt>LIRC</dt>
<dd>The LIRC-exports are in lirc.conf-format using the raw LIRC format. They can be
concatenated together and used as the LIRC server data base. Can also be used with <a
href="http://winlirc.sourceforge.net/">WinLirc</a>.
</dd>
<dt>Pronto Classic</dt>
<dd>This format generates a <a href="Glossary.html#ccfFileFormat">CCF
configuration file</a> to be downloaded in a Pronto, or opened by a ProntoEdit program.</dd>
<dt>IrTrans</dt>
<dd>This export format generates .rem files for the <a
href="Glossary.html#IrTrans">IrTrans</a> system, using its CCF format.</dd>

<dt>Lintronic</dt>
<dd>Simple text protocol for describing a single <a
href="Glossary.html#IrSeqeunce">IrSequence</a>.</dd>

<dt>Spreadsheet</dt>
<dd>Simple <a href="Glossary.html">tab separated value</a> export format for
importing in a spreadsheet program.</dd>

<dt>RM Functions</dt>
<dd>Variant of the Spreadsheet format, this format is intended to be pasted
directly into the "Functions" table of <a href="Glossary.html#RemoteMaster">RemoteMaster</a>.</dd>

<dt>C</dt>
<dd>Intended mostly as an example  of generating C code, cf. <a
href="transforming-xml-export.html">this article</a>.</dd>

<dt>TV-B-Gone</dt>
<dd>Variant of the C format, this format generates C code for the  <a
href="http://en.wikipedia.org/wiki/TV-B-Gone">TV-B-Gone</a>.</dd>
	</dl>


<!--p>For
protocols with toggles, both toggle pairs may optionally be included in
the export file by selecting the "Generate toggle pairs"-option.</p-->
<p>Export file
names are either user selected from a file
selector, or, if "Automatic file names" has been selected,
automatically generated.</p>

<p>The export is performed by pressing the "Export" button. The "..."-marked
button allows for manually selecting the export directory. It is recommended to
create a new, empty directory for the exports. The just-created export file can
be immediately inspected by pressing the "Open last file"-button, which will open
it in the "standard way" of the used operating system. (Also available on the
actions menu.) The "Open" button
similarly opens the operating systems standard directory browser (Windows
Explorer, Konquistador, Nautilus,...) on the export directory.</p>

<p>Some export formats (presently Wave and Lintronic)  export an <a href="Glossary.html#IrSequence">IR sequence</a> rather than an
<a href="Glossary.html#IrSignal">IR signal</a> (consisting of an intro sequence, an repetition sequence (to be
included 0 or more times), and an (most often empty) ending
sequence). Using these formats, the number of repetition sequences to include
can be selected.</p>

<p>Some export formats have some more parameters, configured in sub
panes. These will be discussed next.</p>

<section><title>The Girr sub-pane</title>
<p>A style sheet can be selected to be linked in into the exported Girr
file. The type of style file (presently xslt and css) can also be selected.</p>
<p>"Fat form raw" can be selected; this means that the raw signals are not given
as a text string of alternating positive and negative numbers, but the
individual flashes and gaps are enclosed into own XML elements. This can be
advantageous if generating XML mainly for the purpose of transforming to other formats.</p>
	</section>

<section><title>The Wave sub-pane</title>
<p>Parameters for the generated Wave export (except for the number of repeats)
can be selected here.
<!-- For their meaning, see the article <a href="wave.html">Wave files for IR sequences</a>.-->
</p>
	</section>

<section><title>The sendir sub-pane</title>
<p>The Global Caché sendir format requires a module number and a connector
number. Also, there is a compressed format, that can be enabled by selecting
the compressed check-box.</p>
	</section>

<section><title>The Pronto Classic sub-pane</title>
<p>A Pronto Classic export consists of a <a
href="Glossary.html#ccfFileFormat">CCF file</a> with the exported signals
associated to dummy buttons. The Pronto (Classic) model for which the export is
designed is entered in the combo box. Screen size of the Pronto is normally
inferred from the model, but can be changed here. The button size of the
generated buttons is also entered here.</p>
	</section>

      </section>
      <section>
<title>The "Capturing HW" pane</title>
<p>The sub-panes of this pane allow for the configuration of capturing
hardware. Selecting a sub-pane also selects the associated hardware,
if possible. The hardware can also be selected from the tool bar, Options -&gt;
Capturing hardware.</p>

<p>Unfortunately, by e.g. selecting non-existing hardware or such, there is a
possibility to "hang" the program.</p>

<p>After configuring and opening the capturing hardware, the "Test" button can be
used for testing the configuration without switching pane.</p>

<p>Selected ports are stored in the properties, thereby
remembered between sessions. So, for future sessions, only opening the
preferred device is necessary. </p>

<section><title>IrWidget</title>
<p>Plug the IrWidget it into the computer. Check that the operating system
has assigned a port to it, and note which one it is. On Windows: open the
device manager, and check that there is one "USB Serial Port" under Ports. Note
the port number (e.g. <code>COM8</code>). On a Linux system, it likely shows up as a device
like <code>/dev/ttyUSB0</code>. If the port does not show up, a suitable driver needs to be
installed. If the correct port is already visible in the combo box, just
press "Open". Otherwise, press "Refresh", which makes the program determine
the currently available serial ports. Select the correct one. Press "Open". which should
now remain "pressed". The port can be closed again by another press, but
there is not much reason to do so, unless another capturing hardware should be
used, or the IrWidget should be used from another program.</p>
	</section>

<section><title>Global Caché capture</title>
<p>IrScrutinizer automatically detects alive Global Caché units in the local area
network, using the <a href="Glossary.html#AMXBeacon">AMX Beacon</a>. However, this may take
up to 60 seconds, and is not implemented in very old firmware. Using the "Add"
button, the IP address/name of older units can be entered
manually.</p>

<p>For this to work, port 9131/udp must be open in a used firewall</p>

<p>The "Browse" button points the browser to the selected unit.</p>

<p>The reported type and firmware version serves to verify that the
communication is working.</p>
	</section>

<section><title>LIRC Mode2</title>
<p><code>mode2</code> is a program from the LIRC distribution, that prints timing
information in a simple text format to its standard-out. In theory, any program
that prints information in that format can be used. The command line for the
program with possible parameters is to be entered as command. With the Start
button, a sub-process is started, running the given command line. The "Stop" button
stops the sub-process &mdash; although sometimes this may not stop the started
program.</p>

<p>Has been tested only on Linux, should however work on all systems.</p>
	</section>

<section><title>Arduino</title>
<p>To use the Arduino with a non-demodulating receiver for IR capture, the
sketch <code>GirsLite</code> needs to be loaded.</p>

<p>After connecting the Arduino to a real or virtual serial port, select the port in
the combo box, pressing "Refresh" if necessary. "Open" the port
thereafter.</p>

<p>At least on Linux, the ACMX port may be finicky. Sometimes disconnecting and
reconnecting the device may help.</p>
	</section>

<section><title>IrToy</title>
<p>After connecting the IrToy to a USB  port, select the the actual (virtual) serial port in
the combo box, pressing "Refresh" if necessary. "Open" the port
thereafter.</p>

<p>The ending timeout is 1.4 seconds, and <a
href="http://dangerousprototypes.com/docs/USB_IR_Toy:_Sampling_mode#Potential_issues">cannot
be changed</a>.  This is not
optimal for most IR signal capture use cases.</p>

<p>At least on Linux, the ACMX port may be finicky. Sometimes disconnecting and
reconnecting the device may help.</p>
	</section>

        <section>
            <title>Command Fusion Learner</title>
<p>After connecting the Command Fusion learner to a USB  port, select the the actual (virtual) serial port in
the combo box, pressing "Refresh" if necessary. "Open" the port
thereafter.</p>
	</section>
      <section>
<title>The "Sending HW" pane</title>
<p>The sub-panes of this pane allows for the selection and configuration
of the deployed IR sending hardware.</p>

<section>
<title>The "Global Caché" pane.</title>
<p>IrScrutinizer automatically detects alive Global Caché units in the local area
network, using the <a href="Glossary.html#AMXBeacon">AMX Beacon</a>. However, this may take
up to 60 seconds, and is not implemented in very old firmware. Using the "Add"
button, the IP address/name of older units can be entered manually.</p>

<p>The "Browse" button points the browser to the selected unit.</p>

<p>The reported type and firmware version serves to verify that the
communication is working.</p>

<p>"Stop IR"-Button allows the interruption of ongoing transmission,
possibly initiated from another source.</p>

<p>The user can select one of the thus available Global Caché units, together with
IR-module and IR-port (see <a
 href="http://www.globalcache.com/files/docs/API-GC-100.pdf">the
Global Caché API specification</a> for the exact meaning of these
terms).</p>
	</section>
	  <section>
	    <title>The "LIRC" pane</title>
<p>To be fully usable for IrScrutinizer, the LIRC server has to be extended to be
able to cope with CCF signal not residing in the local data base, but sent from
a client like IrScrutinizer, thus mimicking the function of e.g. a
Global Caché. The needed modification ("patch") is in detail described <a
href="http://www.harctoolbox.org/lirc_ccf.xml">here</a>. However, even without
this patch, the configuration page can be used to send the predefined commands
(i.e. residing it its data base <code>lirc.conf</code>). It can be considered
as a GUI version of
the <a href="http://www.lirc.org/html/irsend.html"><code>irsend</code>
command</a>.</p>
<p>The LIRC server needs to be started in network listening mode with
the <code>-l</code> or <code>--listen</code> option. Default TCP port is
8765.</p>
<p>After entering IP-Address or name, and port (stay with 8765 unless a reason
to do otherwise), press the "Read" button. This will query the LIRC server for
its version (to replace the grayed out "&lt;unknown&gt;" of the virgin
IrScrutinizer), and its known remotes and their commands. Thus, the "Remote" and
"Command" combo boxes should now be selectable. After selecting a remote and one
of its command, it can be sent to the LIRC server by pressing the "Send"
button. If (and only if) the LIRC server has the above described patch applied,
transmitting signals to  "LIRC" now works. </p>

<p>Due to LIRC's peculiar form of API stop command, the "Stop IR" command
presently does not work. See <a
href="http://sourceforge.net/mailarchive/forum.php?thread_name=461617A4.4000404%40bengt-martensson.de&amp;forum_name=lirc-list">this
thread</a> in the LIRC mailing list for a background.</p>
	  </section>
	  <section>
	    <title>The "IRTrans" pane</title>
<p>
The configuration of IRTrans is similar to LIRC, so it will be described
more briefly.</p>
<p>Enter IP name or -address and select an IR port (default "intern"). If the
Ethernet IRTrans contains an "IR Database" (which is a slightly misleading term
for an internal flash memory, that can be filled by the user), its commands can
be sent from this pane. By pressing the "Read" button, the known remotes and
commands are loaded, and the version of the IRTrans displayed. The selected
command can now be sent by the "Send" button. (However, this
functionality is otherwise not used by IrScrutinizer.) Selecting
"IRTrans" on the "Analyze" and "War dialer" pane should now work. The IRTrans
module is then accessed using the UDP text mode.</p>


	</section>
<section>
<title>The "IrToy" Pane</title>
<p>Using this pane, the IrToy (version 2) can be used to transmit IR signals.
    To my knowledge, only the firmware version 2.2.2 works.</p>
</section>
<section>
<title>The "CommandFusion" Pane</title>
<p>Using this pane, the CommandFusion learner can be used to transmit IR signals.</p>
</section>
<section>
<title>The "Arduino" Pane</title>
<p>Using this pane, an Arduino equipped with a suitable IR Led can be used to
transmit IR signals. First however, the sketch
<code>GirsLite</code> from the arduino subdirectory has to be
downloaded to the Arduino.</p></section>
<section>
<title>The "Audio" Pane</title>
<p>
As additional hardware device, IrScrutinizer can generate wave files, that can be
used to control IR-LEDs. This technique has been described many times in the
Internet the last few years, see for example <a
href="http://lirc.org/html/audio.html">this page</a> within the LIRC
project. The hardware consists of a pair of anti-parallel IR-LEDs, preferably
in series with a resistor. Theoretically, this corresponds to a full wave
rectification of a sine wave. Taking advantage of the fact that the LEDs are
conducting only for a the time when the forward voltage exceeds a certain
threshold, it is easy to see that this will generate an on/off signal with the
double frequency of the original sine wave. (See the first picture in the LIRC
article for a picture.) Thus, a IR carrier of 38kHz (which is fairly typical)
can be generated through a 19kHz audio signal, which is (as opposed to 38kHz)
within the realm of medium quality sound equipment, for example using mobile
devices.
</p>
<p>IrScrutinizer can generate these audio signals as wave files, which can be
exported from the export pane, or sent to the local computers sound card. There
are some settings available: Sample frequency (44100, 48000, 96000, 192000Hz),
sample size (8 or 16 bits) can be selected. Also "stereo" files can be
generated by selecting the number of channels to be 2. The use of this feature
is somewhat limited: it just generates another channel in opposite phase to the
first one, for hooking up the IR LEDs to the difference signal between the
left and the right channel. This will buy you double amplitude (6 dB) at the
cost of doubling the file sizes. If the possibility exists, it is better to
turn up the volume instead.
</p>
<!--p>Data can be generated in little-endian (default) or big-endian format. This
applies only to 16-bit sample sizes.</p>

<p>As an experimental option, the carrier frequency division as described above
can be turned off (the "Divide carrier" check-box). This is only meaningful for
sample frequencies of 96kHz and higher, and for "audio equipment" able to
reproduce frequencies like 36kHz and above.</p-->
<p>Most of "our" IR sequences ends with a period of silence almost for the half
of the total duration. By selecting the "Omit trailing gap"-option, this
trailing gap is left out of the generated data &ndash; it is just silence
anyhow. This is probably a good choice (almost) always.</p>

<!--p>Finally, the wave form on the modulation signal can be selected to either
sine or square wave. For practical usage, my experiments shown no real
performance difference.</p-->

<p>Note that when listening to music, higher sample rates, wider sample sizes,
and more channels sound better (in general). However, generating "audio" for
IR-LEDs is a completely different use case. The recommended settings are:
48000kHz, 8bit, 1 channel, omit trailing gap.</p>

<!--p>Note that the settings on this pane also take effect when exporting wave
files from the export pane.</p>
<p>By pressing "Get Line" a "line" to the audio system on the local computer is
allocated. This is actually superfluous, since the send-functions make this
automatically anyhow. It will possibly be removed in future versions.</p-->
      </section>

<!-- Disabled by default, therefore commented out here -->
<!--section>
<title>The "General Serial Port" Pane</title>
<p>This pane contains the controls for sending a signal in a general format to
one of the serial ports available on the system.</p>
    </section-->
      </section>
    </section>
</section>
<section>
<title>Command line arguments</title>
<p>Normal usage is just to double click on the jar-file, or possibly on
some wrapper invoking that jar file. However, there are some command
line arguments that can be useful either if invoking from the command
line, or in writing wrappers, or when configuring custom commands in
Windows. </p>

<p>
The options <code>--version</code> and <code>--help</code> work as they are
expected to work in the <a
 href="http://www.gnu.org/prep/standards/html_node/Command_002dLine-Interfaces.html#Command_002dLine-Interfaces">GNU
coding standards for command line interfaces</a>. Use
the <code>--help</code>-command to see the complete list of command line parameters. The <code>-v/--verbose</code>
option set the verbose flag, causing commands like sending to IR
hardware printing some messages in the console.</p>

<p>The option <code>--nuke-properties</code> makes the program delete the property file, and exit immediately.</p>

<!--p>The second form invokes IrpMaster as a the command line program  on the rest
of the arguments. It is a convenience feature for just having one user entry
point
in the distributed jar file.</p-->

<p>For automating tasks, or for integrating in build processes or Makefiles or
the like, it
is probably a better idea to use IrpMaster instead, which has a
reasonably complete <a href="IrpMaster.html#Command+line+usage">command line interface</a>.</p>

<p>The program delivers well defined and sensible exit codes.</p>
    </section>






<section>
<title>Questions and Answers</title>
<section><title>Does IrScrutinizer completely replaces IrMaster?</title>
<p>Almost. Using <a href='IrMaster.html#The+"IR+Protocols"+pane'>MakeHex as
renderer</a> (or more correctly, its Java version) instead of IrpMaster is not
implemented. (The practical usage of this feature is probably <em>very</em>
limited, and IrMaster is still available, should it ever be needed.) The
<a href='IrMaster.html#The+"War+Dialer"+pane'>"war dialer"</a> is also not
implemented, but see next question. For the wave export, some rarely used
options (the possibility to
select big-endian format (for 16-bit samples), the possibility <em>not</em> to
half the carrier frequency, and the possibility to select sine (instead of
square) for modulation) have been removed. Finally, there is some
stuff that simply works differently, like the export function.</p>
</section>
<section><title>How do I emulate the war dialer in IrScrutinizer?</title>
<p>
Use "Scrutinize remote" -> Parametric Remote. Fill in the table with signals to
be tested, either using the pop-up button (right mouse in the table) Advanced ->
Add missing F's, or from the Generate pane, using suitable parameter intervals
(see TODO), and transfer them using the "To parametric remote" button. Then
test the candidate signals one at a time by transmit-ting them, using suitable
sending hardware.
The comment field, or the "verified" check-box, can be used for note taking.</p>

<p>A "war dialer" like in IrMaster may be implemented in a later version.
</p>
</section>
<section><title>Can I use this program for
conveniently controlling my favorite IR controlled device from the sofa?</title>
<p>No, the program is not meant for that. While you definitely can assemble a
"remote" on the "scrutinize remote" panel, and transmit the different commands
with mouse commands (appropriate hardware assumed), the program is intended for
developing codes for other deployment solutions.
</p>
</section>
<section><title>The pane interface sucks.</title>
<p>Yes.  There are several use cases when the
user would like to see several "panes" simultaneously. Also, it should be
possible to have several windows of the same sort (like the "scrutinize
signal") simultaneously. Replacing the top level panes with something
"Eclipse-like"
(sub-windows that can be rearranged, resized, moved, iconized) is on my
wish list.
</p></section>

<section>
    <title>Why can't I have a device opened <em>both</em> for capturing and sending?</title>
    <p>This is unfortunately a fundamental design flaw, one that sits deep in the design.
        A quick fix is therefore not likely. Sorry.
        (However, it is possible to use two different instances of the hardware,
        e.g. two IrToys; one for capturing and one for transmission.)</p>
</section>

<section>
    <title>What about the "fishy" icon?</title>
    <p>It is a
        <a href="http://en.wikipedia.org/wiki/List_of_races_and_species_in_The_Hitchhiker%27s_Guide_to_the_Galaxy#Babel_fish">Babel fish</a>,
        as found in <a href="http://en.wikipedia.org/wiki/The_Hitchhiker%27s_Guide_to_the_Galaxy">The Hitchhiker's Guide to the Galaxy</a>,
        having the property, that
        "... if you stick one in your ear, you can instantly understand anything said to you in any form of language".
        This symbolizes the program's ability to "understand" a large number of different IR formats.
    </p>
</section>

<section>
    <title>Why supporting the old Global Caché data base but not the new ("<a href="http://irdb.globalcache.com/">Control Tower</a>")?</title>
    <p>Sad, really, it is a really nice data base. The reason is that API retrieval of codes is not allowed for the free accounts.
        The data base can still be used with IrScrutinizer however: Log in with the web interface,
        and have the codes mailed in CSV format (press "Send Code Set").
        The mail received can be imported by the import text pane, raw subpane, Name col. = 1, Raw signal col = 2 (or 3),
        Field separator: comma.
    </p>
</section>

<section>
<title>I did something funny, and now the program does not startup, with no
visible error messages.</title>
<p>Try deleting the <a href="#Properties">properties file</a>.
(Note the command line option <code>--nuke-properties</code> which will do exactly that,
without having to manually find the file or its name.) If that does not help, try
starting the program from the command line, which may leave hopefully
understandable error message on the console.</p></section>

<section><title>(Windows) When I double click on the IrScrutinizer symbol,
instead of the program starting, WinRar (or some other program) comes
up.</title><p>The program that comes up has "stolen" the file association of
files with the extension <code>.jar</code>. Restore it. (Allegedly, WinRar can
gracefully "unsteal" file associations.)</p></section>
<section><title>(Linux) I get error messages that lock files cannot be
created, and then the Arduino and IrToy hardware do not
work.</title><p>
When starting IrScrutinizer, or by pressing the "Refresh" button,
error messages occur like</p>
<p>
<code>
check_group_uucp(): error testing lock file creation Error
details:Permission deniedcheck_lock_status: No permission to create
lock file.
</code>
</p>
<p>
(and a number of them...)
The problem is that the library <code>rxtx</code> (like some other program
accessing a serial interface) wants to create a lock file in a
particular directory. This is/was traditionally
<code>/var/lock</code>, which is often a symbolic link to
<code>/var/run/lock</code>. This directory is normally writable by
members of the group <code>lock</code>. So your user-account should probably
be a member of that group. (How to perform this is different in
different Linux distributions.) The rxtx library delivered with
IrScrutinizer expects the lock directory to be
<code>/var/lock</code>. However, recently some Linux-distributions
(e.g. Fedora 20), instead are using <code>/var/lock/lockdev</code> as
its lock directory (while <code>/var/lock</code> still is a link to
<code>/var/run/lock</code>. To solve this, I recommend, if possible,
installing rxtx provided by the Linux distribution used, i.e. not
using the one with IrScrutinizer. For example, on Fedora, the command
is
</p>
<source>
sudo yum install rxtx
</source>
<p>which installs the library in <code>/usr/lib/rxtx</code> or
<code>/usr/lib64/rxtx</code>, depending on the operating system. (Other distributions uses other
commands, for example <code>apt-get</code> on Debian-like systems.)
Finally, the correct installation directory of the library
(<code>librxtxSerial-2.2pre1.so</code>) has to be given to the JVM
running IrScrutinizer. For this, see the wrapper
<code>irscrutinizer.sh</code> and the comments therein, and make the
necessary adaptations.
</p>
      </section>
      <section>
          <title>What is on the splash screen?</title>
          <p>From left to right, a <a href="http://www.globalcache.com/products/itachflex/">Global Caché iTach Flex</a>,
          an <a href="http://www.seeedstudio.com/depot/usb-infrared-toy-v2-p-831.html?cPath=174">IrToy</a>,
          and a low-cost clone of an <a href="http://arduino.cc/en/Main/ArduinoBoardNano">Arduino Nano</a>,
          the latter equipped with a non-demodulating IR detector (TSMP4138) for capturing and an IR diode (SFH415) for sending.
          These are all hardware which work well with IrScrutinizer, both for sending and capturing.</p>
      </section>
      <section>
          <title>Do you solicit or accept donations?</title>
          <p>No.</p>
      </section>
</section>
<section>
    <title>Appendix. Building from sources</title>
<p>"IrScrutinizer" is one subproject (corresponding to a Java package) within "harctoolbox.org".
    It depends on several other subprojects within harctoolbox. The project "harctoolboxbundle" consists
    of these subproject bundled together, with some dependent third-party components added.</p>

    <p>The released versions are found on the <a href="http://www.harctoolbox.org/downloads/index.html">download page</a>.
    The development sources are maintained on <a href="https://github.com/bengtmartensson/harctoolboxbundle">my GitHub repository</a>.
    Forking and pull requests are welcome!</p>
<section>
    <title>Dependencies</title>
<p>
As any program of substantial size, IrScrutinizer uses a number of third-party components.
    All of these are also free software, carrying compatible licenses.
The dependent packages need to be installed also in
    maven in order for the build to work. With the dependencies available, the script <code>tools/install-deps.sh</code>
can be used to install  them in the local maven repository before building.</p>

<p>Presently, Fedora RPMs are available for all dependencies.
    Installing the <code>harctoolbox</code> package will also install all dependencies, in which case
the information in this chapter is not needed.</p>

    <section>
        <title>The Crystal icons</title>
        <p>A subset of the Crystal icons are included, and will be included in a built jar.
    Most Linux distributions contain these too, so a Linux packaging may like to use the system icons instead.</p>
    </section>
    <section>
        <title>RXTX</title>
<p>The serial communication packate RXTX is also included in the source package. This builds a shared library and a jar file.
    If there is a system supported RXTX (librxtxSerial really), it should be preferred.
    The distribution constains pre-compiled binaries for Linux, Windows, and Mac OS X, both in 32- and 64-bit versions.
    To compile the C sources, see the sub-directory <code>rxtx-pre2h</code> and the instructions therein.</p>

    <p>Note that the system supplied RXTX jar on many system (e.g. Fedora 21) has some issues
        (version number incompatible with the shared library, does not recognize
        the <code>/dev/ttyACM*</code>-ports required by IrToy and many Arduinos, unflexible library loading),
        so using our RXTX jar together with the system supplied shared library can be sensible.</p>
    </section>

    <section>
        <title>DecodeIR</title>
        <p>If the system supports DecodeIR, use the system version. On recent Fedora, this can be installed with the command
            <code>sudo yum install DecodeIR</code>. This will install both the shared
            library <code>libDecodeIR</code> as well as the jar file <code>DecodeIrCaller.jar</code>.
To download and compile the sources, see (or execute) the script <code>tools/build-decodeir.sh</code>.</p>
    </section>

    <section>
        <title>ExchangeIR</title>
        <p>It the system supports ExchangeIR (java), use the system version. (On recent Fedora, use <code>sudo yum install ExchangeIR</code>.)
        Otherwise, it can be downloaded and installed by the script <code>tools/build-exchangeir.sh</code>.</p>
    </section>

    <section>
        <title>minimal-json</title>
        <p>It the system supports minimal-json, use the system version. (On recent Fedora, use <code>sudo yum install minimal-json</code>.)
        Otherwise, it can be downloaded and installed by the script <code>tools/build-minimal-json.sh</code>.</p>
    </section>

    <section>
        <title>jcommander</title>
        <p>It the system supports jcommander, use the system version. (On recent Fedora, use <code>sudo yum install beust-jcommander</code>.)
        Otherwise, it can be downloaded and installed by the script <code>tools/build-jcommander.sh</code>.</p>
    </section>

    <section>
        <title>Tonto</title>
        <p>It the system support Tonto, use the system version. (On recent Fedora, use <code>sudo yum install tonto</code>.)
        Otherwise, it can be downloaded and installed by the script <code>tools/build-tonto.sh</code>.</p>

        <p>Note that the shared library <code>libjnijcomm</code>,
        which is required by the program Tonto for communicating with a Pronto remote through a serial interface,
        is not required for use with IrScrutinizer, and can therefore be left out.</p>
</section>
</section>
<section>
    <title>Building</title>
    <p>As of version 1.1.2, the <a href="http://maven.apache.org/index.html">Maven</a> "software
project management and comprehension tool" is used as building system.
Modern IDEs like Netbeans and Eclips integrate Maven, so build etc can be initiated from the IDE.
Of course, the shell command <code>mvn install</code> can also be used. It creates some artifacts which can
be used to run IrScrutinizer in the <code>IrScrutinizer/target</code> directory.</p>
<p>It also creates a <code>package/dist</code> directory containing jars
(without dependencies), docs, and configurations files. This is intened to support
packaging.</p>

<p>To prepare the Windows version, some shell tools are needed. These are:</p>
<ul>
    <li>The <code>unix2dos</code> and <code>dos2unix</code> utilities, typically in the <code>dos2unix</code> package.</li>
    <li>The <code>icotool</code> utility, typically in the <code>icoutils</code> package</li>
</ul>
</section>

<section>
    <title>Windows setup.exe creation</title>
    <p>For building the Windows setup.exe, the <a href="http://www.jrsoftware.org/download.php/is.exe">Inno Installer version 5</a>
    is needed. To build the Windows setup.exe file, preferrably the work area should
be mounted on a Windows computer. Then, on the Windows computer, open
        the generated file <code>IrScrutinizer/target/IrScrutinizer_inno.iss</code> with
        the Inno installer, and start the compile. This will generate the desired file
        <code>IrScutinizer-</code><em><code>version</code></em><code>.exe</code>.</p>
</section>

<section>
    <title>Mac OS X app creation</title>
    <p>The Maven build creates a file
<code>IrScrutinizer-</code><em><code>version</code></em><code>-app.zip</code>.
This file can be directly distributed to the users, to be installed according to
<a href="http://localhost:8888/IrScrutinizer.html#Mac+OS+X+app">these instructions</a>.</p>

<p>The icon file <code>IrScrutinizer.icns</code> was produced from the Crystal-Clear
icon <code>babelfish.png</code> in 128x128 resolution, using the procedure
described
<a href="http://stackoverflow.com/questions/11770806/why-doesnt-icon-composer-2-4-support-the-1024x1024-size-icon-any-more">here</a>.
        </p>
</section>

<section>
    <title>Test invocation</title>
    <p>For testing purposes, the programs can be invoked from their different target directories.
        IrScrutinizer can be invoked as</p>
<source>$ cd IrScrutinizer
$ java -jar target/IrScrutinizer-jar-with-dependencies.jar
</source>
<p>and IrpMaster as</p>
    <source>$ cd IrpMaster
$ java -jar target/IrpMaster-jar-with-dependencies.jar <em>[arguments...]</em>
    </source>
<p>IrScrutinizer can also be started by double clicking the mentioned jar file,
    provided that the desktop has been configured to start executable jar with "java".</p>
</section>

<section>
    <title>Installation</title>
    <p>For reasons unclear to me, Maven does not support something like <code>make install</code> for installing a
    recently build program on the local host. Instead, the supplied script <code>tools/install-irscrutinizer.sh</code>
    installs the program to normal Linux/autotools locations.
    (Actually, invoking Maven with the "deploy" target will invoke this script too.)
    Alternativelly, the just created generic-binary package
    (<code>IrScrutinizer/target/IrScrutinizer-bin.zip</code>) can be installed using <a href="#Generic+Binary">these instuctions</a>.</p>
</section>

</section>
    <section>
<title>References</title>
<ol>
  <li><a href="IrpMaster.html">IrpMaster</a>. Also a GPL3-project by
myself. Much harder
to read than the present document :-). See also <a
 href="http://www.hifi-remote.com/forums/viewtopic.php?t=13396">this
discussion thread</a> in the JP1 forum.</li>
  <li><a href="IrMaster.html">IpMaster</a>. Also a GPL3-project by
myself. The precessor of the this program.  See also <a
 href="http://www.hifi-remote.com/forums/viewtopic.php?t=13655">this
discussion thread</a> in the JP1 forum.</li>
  <li>The <a href="http://www.harctoolbox.org">Harctoolbox project</a>,
also a GPL3-project by myself.</li>
	<li id="DecodeIRReference"><a
 href="http://www.hifi-remote.com/forums/dload.php?action=file&amp;file_id=9980">DecodeIR</a>. This
shared library tries to identify protocol name and parameters of an IR signal
in raw form. Thus, it is in a sense, it implements the "inverse mapping" of
IrpMaster.</li>

 <li><a href="http://www.globalcache.com">GlobalCaché</a>,
a manufacturer of Ethernet connected IR hardware. Note that I have only tried
with the <a href="http://www.globalcache.com/products/gc-100/">GC-100
series</a>, but the IR sending models of the<a
href="http://www.globalcache.com/products/itach/models2/">iTach family</a> are
believed to work too. (Feel free to send me one :-).)</li>
  <li><a href="http://www.irtrans.com">IRTrans</a>, another
manufacturer of Ethernet connected IR-hardware. The <a
 href="http://www.irtrans.com/en/shop/lan.php">"IRTrans Ethernet"
module</a>, preferably with "IRDB Option" (internal flash memory), is
directly supported by the current software.</li>
  <li><a href="http://www.lirc.org">LIRC, Linux InfraRed Control</a>
This project contain drivers for almost everything IR-related. The present
project is able to use a <a href="lirc_ccf.html">modified LIRC-server</a> for transmitting IR signals.</li>
</ol>
    </section>
  </body>
</document>
